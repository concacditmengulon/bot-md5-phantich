const TelegramBot = require('node-telegram-bot-api');
const brain = require('brain.js');
const md5 = require('md5');
const express = require('express');

// C·∫•u h√¨nh bot v·ªõi Webhook
const token = process.env.TELEGRAM_TOKEN || '7751217253:AAHYIOAF0HMufS9sm5soBgjOjdIy1XwyILg';
const webhookUrl = process.env.WEBHOOK_URL || 'https://bot-md5-phantich-1.onrender.com';
const bot = new TelegramBot(token, { polling: false });
bot.setWebHook(`${webhookUrl}/bot${token}`);

// T·∫°o d·ªØ li·ªáu hu·∫•n luy·ªán gi·∫£ l·∫≠p (1000 m·∫´u)
function generateTrainingData() {
  const data = [];
  for (let i = 0; i < 1000; i++) {
    const seed = i.toString();
    const md5Hash = md5(seed);
    const hexSum = md5Hash.split('').reduce((sum, c) => sum + parseInt(c, 16), 0);
    const total = (hexSum % 16) + 3;
    const taixiu = total >= 11 ? 1 : 0;
    const vi = [
      Math.floor(total / 3) % 6 + 1,
      Math.floor(total / 3) % 6 + 1,
      (total - 2 * Math.floor(total / 3)) % 6 + 1
    ].map(v => (v === 0 ? 1 : v));
    data.push({ md5: md5Hash, taixiu, vi });
  }
  return data;
}

const trainingData = generateTrainingData();

// Tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng t·ª´ m√£ MD5
function extractFeatures(md5) {
  const hexValues = md5.split('').map(c => parseInt(c, 16));
  const segments = [];
  for (let i = 0; i < 32; i += 8) segments.push(md5.slice(i, i + 8));
  return [
    hexValues.reduce((sum, v) => sum + v, 0),
    hexValues.reduce((sum, v) => sum + v, 0) / hexValues.length,
    Math.sqrt(hexValues.reduce((sum, v) => sum + (v - hexValues.reduce((s, v) => s + v, 0) / hexValues.length) ** 2, 0) / hexValues.length),
    md5.split('').filter(c => /[0-9]/.test(c)).length,
    md5.split('').filter(c => /[a-f]/.test(c)).length,
    ...segments.map(seg => seg.split('').reduce((sum, c) => sum + parseInt(c, 16), 0)),
    new Set(md5).size
  ];
}

// Hu·∫•n luy·ªán m√¥ h√¨nh AI
const net = new brain.NeuralNetwork();
const trainingSet = trainingData.map(({ md5, taixiu }) => ({
  input: extractFeatures(md5).map(v => v / 1000),
  output: [taixiu]
}));
net.train(trainingSet);

// D·ª± ƒëo√°n v·ªã (kh√¥ng random)
function predictVi(features) {
  const total = (features.reduce((sum, v) => sum + v, 0) % 16) + 3;
  const vi = [
    Math.floor(total / 3) % 6 + 1,
    Math.floor(total / 3) % 6 + 1,
    (total - 2 * Math.floor(total / 3)) % 6 + 1
  ].map(v => (v === 0 ? 1 : v));
  return vi;
}

// Ph√¢n t√≠ch c·∫ßu
const history = [];
function analyzeBridge() {
  if (history.length < 3) return 'Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch c·∫ßu.';
  const last3 = history.slice(-3);
  const last4 = history.slice(-4);
  if (last3.every(x => x === last3[0])) return `C·∫ßu b·ªát ${last3[0]} (li√™n t·ª•c ${history.length} v√°n).`;
  if (last4.length >= 4 && last4.join(',') === 'T√†i,X·ªâu,T√†i,X·ªâu') return 'C·∫ßu 1-1 (T√†i-X·ªâu xen k·∫Ω).';
  if (last4.length >= 4 && last4.join(',') === 'T√†i,T√†i,X·ªâu,X·ªâu') return 'C·∫ßu 2-2 (T√†i-T√†i-X·ªâu-X·ªâu).';
  return 'C·∫ßu kh√¥ng r√µ r√†ng, c·∫ßn theo d√µi th√™m.';
}

// Ki·ªÉm tra m√£ MD5 h·ª£p l·ªá
function isValidMd5(md5) {
  return /^[0-9a-fA-F]{32}$/.test(md5);
}

// X·ª≠ l√Ω l·ªánh /md5
bot.onText(/\/md5 (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const md5 = match[1];

  if (!isValidMd5(md5)) {
    bot.sendMessage(chatId, 'M√£ MD5 kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p m√£ MD5 32 k√Ω t·ª±.');
    return;
  }

  const features = extractFeatures(md5);
  const taixiuPred = net.run(features.map(v => v / 1000))[0];
  const taixiu = taixiuPred > 0.5 ? 'T√†i' : 'X·ªâu';
  const confidence = (taixiuPred > 0.5 ? taixiuPred : 1 - taixiuPred) * 200;
  const vi = predictVi(features);
  const viStr = vi.join('-');

  history.push(taixiu);
  if (history.length > 10) history.shift();
  const bridgeAnalysis = analyzeBridge();

  const response = `
üíé PH√ÇN T√çCH T√ÄI X·ªàU MD5 üíé
MD5: ${md5}
D·ª∞ ƒêO√ÅN: ${taixiu}
ƒêO√ÅN V·ªä: ${viStr}
T·ªà L·ªÜ TH·∫ÆNG: ${confidence.toFixed(2)}%
KHUY·∫æN NGH·ªä ƒê·∫∂T: ${taixiu} ho·∫∑c V·ªã ${viStr}
PH√ÇN T√çCH C·∫¶U: ${bridgeAnalysis}
  `;
  bot.sendMessage(chatId, response);
});

// C·∫•u h√¨nh server Express cho Webhook
const app = express();
app.use(express.json());

app.post(`/bot${token}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

app.get('/', (req, res) => {
  res.send('Bot is running!');
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
